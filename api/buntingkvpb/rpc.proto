syntax = "proto3";
package buntingkvpb;

import "gogoproto/gogo.proto";
import "buntingkv.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Low level KV queries
service ShardGroup {
    rpc Batch(ShardGroupBatchRequest) returns (ShardGroupBatchResponse);
    rpc Query(ShardGroupQueryRequest) returns (ShardGroupQueryResponse);
    rpc Watch(ShardGroupWatchRequest) returns (stream ShardGroupWatchResponse);
}

// System metadata
service System {
    rpc Batch(SystemBatchRequest) returns (SystemBatchResponse);
    rpc Query(SystemQueryRequest) returns (SystemGetResponse);
    rpc Watch(SystemWatchRequest) returns (stream SystemWatchResponse);
}

message BatchRequest {
    repeated UpdateCondition conditions = 1;
    repeated UpdateRequest requests = 2;
}

message BatchResponse {
    repeated UpdateResponse responses = 1;
}

message UpdateCondition {
    oneof condition {
        DocumentVersionMatches document_version_matches = 1;
    }
}

message UpdateRequest {
    oneof request {
        CreateCollectionRequest create_collection = 1;
        UpdateCollectionRequest update_collection = 2;
        DeleteCollectionRequest delete_collection = 3;
        CreateShardRequest create_shard = 4;
        UpdateShardRequest update_shard = 5;
        DeleteShardRequest delete_shard = 6;
        CreateShardGroupRequest create_shard_group = 7;
        UpdateShardGroupRequest update_shard_group = 8;
        DeleteShardGroupRequest delete_shard_group = 9;
        CreateShardSplitRequest create_shard_split = 10;
        UpdateShardSplitRequest update_shard_split = 11;
        DeleteShardSplitRequest delete_shard_split = 12;
    }
}

message UpdateResponse {
    oneof response {
        CreateCollectionResponse create_collection = 1;
        UpdateCollectionResponse update_collection = 2;
        DeleteCollectionResponse delete_collection = 3;
        CreateShardResponse create_shard = 4;
        UpdateShardResponse update_shard = 5;
        DeleteShardResponse delete_shard = 6;
        CreateShardGroupResponse create_shard_group = 7;
        UpdateShardGroupResponse update_shard_group = 8;
        DeleteShardGroupResponse delete_shard_group = 9;
        CreateShardSplitResponse create_shard_split = 10;
        UpdateShardSplitResponse update_shard_split = 11;
        DeleteShardSplitResponse delete_shard_split = 12;
    }
}

message CreateCollectionRequest {
}

message CreateCollectionResponse {
}

message UpdateCollectionRequest {
}

message UpdateCollectionResponse {
}

message DeleteCollectionRequest {
}

message DeleteCollectionResponse {
}

message GetCollectionRequest {
}

message GetCollectionResponse {
}

message ListCollectionsRequest {
}

message ListCollectionsResponse {
}

message CreateCollectionObserverRequest {
}

message CreateCollectionObserverResponse {
}

message UpdateCollectionObserverRequest {
}

message UpdateCollectionObserverResponse {
}

message DeleteCollectionObserverRequest {
}

message DeleteCollectionObserverResponse {
}

message GetCollectionObserverRequest {
}

message GetCollectionObserverResponse {
}

message ListCollectionObserversRequest {
}

message ListCollectionObserversResponse {
}


message CreateHostRequest {
}

message CreateHostResponse {
}

message UpdateHostRequest {
}

message UpdateHostResponse {
}

message DeleteHostRequest {
}

message DeleteHostResponse {
}

message GetHostRequest {
}

message GetHostResponse {
}

message ListHostsRequest {
}

message ListHostsResponse {
} 

message KVRequestOp {
    oneof request {
        KVCreateRequest create = 1;
        KVUpdateRequest update = 2;
        KVPatchRequest patch = 3;
        KVBatchRequest batch = 4;
        KVDeleteRequest delete = 5;
        KVQueryRequest query = 6;
    }
}

message KVResponseOp {
    oneof response {
        KVCreateResponse create = 1;
        KVUpdateResponse update = 2;
        KVPatchResponse patch = 3;
        KVBatchResponse batch = 4;
        KVDeleteResponse delete = 5;
        KVQueryResponse query = 6;
    }
}

message KVTxnRequest {
    repeated KVRequestOp requests = 1;
}

message KVTxnResponse {
    repeated KVResponseOp responses = 1;
}

message KVCreateRequest {
    Key key = 1;
    bytes value = 2;
}

message KVCreateResponse {
}

message KVUpdateRequest {
    Key key = 1;
    bytes value = 2;
}

message KVUpdateResponse {
}

message KVPatchRequest {
    Key key = 1;
    bytes patch = 2;
}

message KVPatchResponse {
}

message KVBatchRequest {
    bytes collection = 1;
    bytes partition = 2;
    bytes request = 3;
}

message KVBatchResponse {
    int64 count = 1;
}

message KVDeleteRequest {
    Key key = 1;
}

message KVDeleteResponse {
}

message KVPredicate {
    // [FIELD] [COMPARISON] [VALUE]
    enum Operator {
      // =
      EQUAL = 0;
      // !=
      NOT_EQUAL = 1;
      // >
      GT = 2;
      // >=
      GTE = 3;
      // <
      LT = 4;
      // <=
      LTE = 5;
      STARTS_WITH = 6;
    }
  
    // operator is the logical comparison operation for this comparison.
    Operator operator = 1;
    // value is the basis for comparison.
    bytes value = 2;
}

message KVWatchRequest {
    // start is an optional offset to watch from (exclusive). No start is "now".
    int64 start = 1;
    // Only keys matching the predicates in the selection will be included in the result
    repeated KVPredicate selection = 2 [(gogoproto.nullable) = false];
    // progress_notify is set so that the buntingkv server will periodically send a KVWatchResponse with
    // no events to the new watcher if there are no recent events. It is useful when clients
    // wish to recover a disconnected watcher starting from a recent known revision.
    // The ptarmigan server may decide how often it will send notifications based on current load.
    bool progress_notify = 3;
    // filter out put events.
    bool no_put = 4;
    // filter out delete event.
    bool no_delete = 5;
}

message KVWatchResponse {
    // Indicates that the watch request tried watching from a
    // compacted revision. The client should treat the watcher
    // as canceled and should not try to create any watcher with
    // the same start again.
    bool compacted = 1;
    // cancel_reason indicates the reason for canceling the watcher.
    string cancel_reason = 2;
    // Watchers should keep track of the latest after cursor
    // so that they can resume where they left off with a
    // subsequent watch request. If the last watch request
    // was canceled due to compaction this cursor is not valid
    // Use of an after cursor from a compacted revision will
    // result in another canceled watch request.
    int64 after = 3;
    // Events contains a list of events ordered by
    // by [revision,key]. There may be events from several different
    // revisions in the events list, but events from older revisions
    // will appear first.
    repeated Event events = 4 [(gogoproto.nullable) = false];
}

message Event {
    enum EventType {
      PUT = 0;
      DELETE = 1;
    }
    // type is the kind of event. If type is a PUT, it indicates
    // new data has been stored to the key. If type is a DELETE,
    // it indicates the key was deleted.
    EventType type = 1;
    // kv holds the KeyValue for the event.
    // A PUT event contains current kv pair.
    // A PUT event with kv.Version=1 indicates the creation of a key.
    // A DELETE event contains the deleted key with
    // its modification revision set to the revision of deletion.
    KeyValue kv = 2 [(gogoproto.nullable) = false];
}

message KVQueryRequest {
    enum SortOrder {
        NONE = 0;  // default, no sorting
        ASC = 1; // lowest target value first
        DESC = 2; // highest target value first
    }

    bytes collection = 1;

    bytes partition = 2;

    repeated int64 shard_ids = 3;

    // Only keys matching the predicates in the selection will be included in the result
    repeated KVPredicate selection = 4 [(gogoproto.nullable) = false];

    // Use after to get the next page of results by inserting the after cursor from the
    // previous page.
    string after = 5;
    // limit is the limit on the number of keys returned in the result.
    // If limit is set to 0 the default limit is used.
    int64 limit = 6;
    // sort_order is the order for returned sorted results.
    SortOrder sort_order = 7;
    // exclude_values when set excludes values from the resulting kvs
    bool exclude_values = 8;
    // include_count when set includes the total count of keys matching
    // the query constraints in the result
    bool include_count = 9;
}

message KVQueryResponse {
    // kvs is the list of key-value pairs matched by the query.
    repeated KeyValue kvs = 1 [(gogoproto.nullable) = false];
    // more indicates if there are more keys matching the query.
    bool more = 2;
    // after is a cursor that can be used in to get the next page
    // of results after this one.
    string after = 3;
    // count is set to the total number of keys matching the query.
    int64 count = 4;
}
